/**
 * This program calculates the average category, pressure, and wind speed of
 * Atlantic Hurricanes between 1995-2015.
 *
 * @author 
 * @version 11/5/18
 */
import java.util.Scanner;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
public class HurricaneSelector
{
    public static void main(String[] args)throws IOException
    {
        //declare variables
        int arrayLength = 156;
        
        int[] year = new int[arrayLength];
        String[] month = new String[arrayLength];
        int[] pressure = new int[arrayLength];
        int[] windSpeed = new int[arrayLength];
        int[] category = new int[arrayLength];
        String[] name = new String[arrayLength];
        int f0 = 0;
        int f1 = 0;
        int f2 = 0;
        int f3 = 0;
        int f4 = 0;
        int f5 = 0;
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int maxCategory = 0;
        int minCategory = 0;
        int maxSpeed = 0;
        int minSpeed = 0;
        int maxPressure = 0;
        int minPressure = 0;
        int sum = 0;
        int averageCategory = 0;
        int averageSpeed = 0;
        int averagePressure = 0;
        
        File fileName = new File("hurricanedata.txt");
        Scanner inFile = new Scanner(fileName);
        PrintWriter outFile = new PrintWriter(new File("Summary.txt"));
        
        //input from data file
        int index = 0;
        while (inFile.hasNext())
        {
            year[index] = inFile.nextInt();
            month[index] = inFile.next();
            pressure[index] = inFile.nextInt();
            windSpeed[index] = inFile.nextInt();
            name[index] = inFile.next();
            index++;
        }
        inFile.close();
         
        //calculations
        
        //convert windspeed
        for (int i = 0; i < windSpeed.length; i++)
        {
            windSpeed[i] = (int)(windSpeed[i] * 1.151);
        }
        
        //determine category of hurricane
        for (int i = 0; i < windSpeed.length; i++)
        {
            if (windSpeed[i] >= 74 && windSpeed[i] <= 95)
            {
                category[i] = 1;
            }
            else if (windSpeed[i] >= 96 && windSpeed[i] <= 110)
            {
                category[i] = 2;
            }
            else if (windSpeed[i] >= 111 && windSpeed[i] <= 129)
            {
                category[i] = 3;
            }
            else if (windSpeed[i] >= 130 && windSpeed[i] <= 156)
            {
                category[i] = 4;
            }
            else if (windSpeed[i] >= 157)
            {
                category[i] = 5;
            }
            else
            {
                category[i] = 0;
            }
        }
        
        //category counter
        for (int hurricane : category)
        {
            if (hurricane == 1)
            {
                f1++;
            }
            else if (hurricane == 2)
            {
                f2++;
            }
            else if (hurricane == 3)
            {
                f3++;
            }
            else if (hurricane == 4)
            {
                f4++;
            }
            else if (hurricane == 5)
            {
                f5++;
            }
            else
            {
                f0++;
            }
        }   
        
        //find min, max, avg for category, windspeed, pressure
        //min and max category
        for (int hurricane : category)
        {
            if (hurricane > max)
            {
                max = hurricane;
            }
        }   
        maxCategory = max;
        max = Integer.MIN_VALUE;
        for(int hurricane : category)
        {
            if (hurricane < min)
            {
                min = hurricane;
            }
        }
        minCategory = min;
        min = Integer.MAX_VALUE;
        
        //min and max windspeed
          for (int hurricane : windSpeed)
        {
            if (hurricane > max)
            {
                max = hurricane;
            }
        }   
        maxSpeed = max;
        max = Integer.MIN_VALUE;
        for(int hurricane : windSpeed)
        {
            if (hurricane < min)
            {
                min = hurricane;
            }
        }
        minSpeed = min;
        min = Integer.MAX_VALUE;
        
        //min and max pressure
          for (int hurricane : pressure)
        {
            if (hurricane > max)
            {
                max = hurricane;
            }
        }   
        maxPressure = max;
        max = Integer.MIN_VALUE;
        for(int hurricane : pressure)
        {
            if (hurricane < min)
            {
                min = hurricane;
            }
        }
        minPressure = min;
        min = Integer.MAX_VALUE;
        
        //avg category
        for (int hurricane : category)
        {
            sum += hurricane;
        }
        averageCategory = (int)(sum / category.length);
        sum = 0;
        
        // avg wind speed
        for (int hurricane : windSpeed)
        {
            sum += hurricane;
        }
        averageSpeed = (int)(sum / windSpeed.length);
        sum = 0;
        
        //avg pressure
        for (int hurricane : pressure)
        {
            sum += hurricane;
        }
        averagePressure = (int)(sum / pressure.length);
        sum = 0;
        
        //print header to screen
        System.out.printf("%33s%5s%2s%5s%n%n", "Hurricanes", "1995", "-", "2015");
        System.out.printf("%4s%14s%15s%18s%21s%n", "Year", "Hurricane", "Category", "Pressure (mb)", "Wind Speed (mph)");
        System.out.printf("========================================================================%n");
        
        //print data to screen
        for (int i = 0; i < year.length; i++)
        {
            System.out.printf("%-10d%-12s%8d%16d%18d%n", year[i], name[i], category[i], pressure[i], windSpeed[i]);
        }
        System.out.printf("=====================================================================%n");
        
        //print average to screen
        System.out.printf("%7s%13d%16d%18d%n", "\tAverage: ", averageCategory, averagePressure, averageSpeed);
        System.out.printf("%7s%13d%16d%18d%n", "\tMaximum: ", maxCategory, maxPressure, maxSpeed);
        System.out.printf("%7s%13d%16d%18d%n%n", "\tMinimum: ", minCategory, minPressure, minSpeed);

        System.out.println("Summary of Categories:");
        System.out.println();
        System.out.println("\tNumber of Category 1: " + f1);
        System.out.println("\tNumber of Category 2: " + f2);
        System.out.println("\tNumber of Category 3: " + f3);
        System.out.println("\tNumber of Category 4: " + f4);
        System.out.println("\tNumber of Category 5: " + f5);
        
        //output write header to text file
        outFile.printf("%33s%5s%2s%5s%n%n", "Hurricanes", "1995", "-", "2015");
        outFile.printf("%4s%14s%15s%18s%21s%n", "Year", "Hurricane", "Category", "Pressure (mb)", "Wind Speed (mph)");
        outFile.printf("========================================================================%n");
        
        //print data to text file
        for (int i = 0; i < year.length; i++)
        {
            outFile.printf("%-10d%-12s%8d%16d%18d%n", year[i], name[i], category[i], pressure[i], windSpeed[i]);
        }
        outFile.printf("=====================================================================%n");
        
        //print average to text file
        outFile.printf("%7s%13d%16d%18d%n", "\tAverage: ", averageCategory, averagePressure, averageSpeed);
        outFile.printf("%7s%13d%16d%18d%n", "\tMaximum: ", maxCategory, maxPressure, maxSpeed);
        outFile.printf("%7s%13d%16d%18d%n%n", "\tMinimum: ", minCategory, minPressure, minSpeed);

        outFile.println("Summary of Categories:");
        outFile.println();
        outFile.println("\tNumber of Category 1: " + f1);
        outFile.println("\tNumber of Category 2: " + f2);
        outFile.println("\tNumber of Category 3: " + f3);
        outFile.println("\tNumber of Category 4: " + f4);
        outFile.println("\tNumber of Category 5: " + f5);
        outFile.close();

    }
}
